Para criar um novo projeto em Angular usamos o comando:
    -  ng new appPassaroUrbano --prefix main
    -  Prefix é o nome do seletor pelo qual o componente será invocado dentro do html.
    -  Foi criado uma tag chamada main-root,  <main-root></main-root> para invocar nosso 
    -  componente. 
- Também podemos usar a flag --minimal na criação do projeto se não quisermos que seja 
criado os arquivos de testes.

- Podemos alterar o prefix através do arquivo angular.json.

Instalando o Bootstrap, JQuery e Tether no projeto

- npm install bootstrap@4.5.3 --save
- npm install jquery@3.5.1 --save
- npm install popper.js@1.14.3 --save
- npm install tether@2.0.0 --save

- Após a instalação é necessário referenciar no arquivo angular.json os arquivos de estilo
css e javascript js.

- O Tether é uma biblioteca JavaScript para fazer com que um elemento posicionado 
  absolutamente de forma eficiente fique próximo a outro elemento na página. 
  Por exemplo, você pode desejar que uma dica de ferramenta ou caixa de diálogo 
  seja aberta e permaneça próxima ao item relevante na página.

- Com o Tether Podemos posicionar elementos dentro do DOM (árvore do html) de forma simplificada.

Criando os componentes Topo, Home e Rodape

- Criamos três componentes, topo (header), rodape (footer), home (conteudo principal).
- Para criar os componentes usaremos os seguintes comandos: 

- ng g c topo --skip-tests
- ng g c home --skip-tests
- ng g c rodape --skip-tests

- O nome do seletor pode ser consultado dentro do arquivo ts do proprio componente
ao qual queremos referenciar.
- O nome do seletor é composto pelo nome do seletor principal + nome do componente.
- O nome do seletor principal fica no arquivo angular.json em prefix.

- Comando para rodar o JSON Server:
    - json-server --watch db.json

- A porta default do JSON Server é a 3000.

Criando e alterando o favicon

- O favicon principal da aplicação fica no diretório src/favicon.ico
- Há uma referência para o favicon no arquivo angular.json.

O que são Serviços (Services)?

- Serviços são classes comuns com objetivos bem definidos que visam atender a alguma 
necessidade específica da aplicação.

- A funcão do componente é fazer o databinding com seu respectivo template.
- Podemos criar um serviço para controlar os logs de acesso para podermos saber
quais rotas estão sendo acessadas.
- Podemos usar um serviço para fazer o retorno de uma API de terceiro.
- Quando necessário os serviços podem ser injetados nos componentes que por sua 
vez farão as mudanças visuais em seus templates.
- Um serviço pode ser injetado em três escopos diferentes, em escopo de módulo, por 
exemplo no AppModule é aonde declaramos todos os componentes da aplicação.
- Podemos trabalhar com a mesma instância de um serviço em toda a aplicação de modo 
singleton.
- Um serviço pode ser injetado diretamente no componente e ficar disponível 
apenas no componente em que foi injetado, ou também pode ser declarado no módulo 
principal e ficar disponível em toda a aplicação.
- Um serviço pode ser injetado em outro serviço através da função decoradora @Injectable.

Criando um serviço para exibir ofertas

Injetando o serviço de ofertas no componente Home parte 1

- Instanciar uma classe de serviço dentro do arquivo ts do componente que iremos utilizar
é uma maneira errada de usar um service.
- Primeiro temos que configurar o serviço como sendo um provider.
- Dentro do decorator @Component do arquivo ts do componente atual referenciamos em 
providers o nome da classe que contém o serviço que queremos injetar.
- Segundo temos que criar uma variavel dentro do construtor da classe do componente,
essa variavel será privada e do tipo da classe que contém o service.

- Se declararmos um provider dentro de @NgModule em app.module.ts ele estará disponível
para todos os componentes da aplicação.

Exibindo ofertas com base no serviço OfertasService parte 1

- A idéia é criar uma classe que representa uma oferta e trabalharmos com arrays de ofertas
dentro de nossa aplicação.

App2 - Exibindo ofertas com base no serviço OfertasService parte 2

- Em serviços podemos trabalhar com escopos diferenciados, por exemplo o escopo do módulo 
principal inteiro.

Promises - Entendendo o processamento síncrono e assíncrono

- Promises como o próprio nome sugere são promessas. Na pratica uma promise é um objeto 
usado para processamento assíncrono, esse objeto representa um valor que pode estar 
disponível agora, no futuro ou nunca.

Processamento síncrono e assíncrono

- Processamento síncrono: Aguarda a finalização do processo para seguir para o próximo.
- Processamento assíncrono: Não aguarda a finalização do processo seguindo para o próximo.

Promises na prática parte 1 - Introdução a estratégia de uso

- Algo é síncrono quando o retorno é imediato, por exemplo consultar dados em memória.
- Quando a informação demora certo tempo para ser retornada estamos trabalhando de forma 
assíncrona, nesse caso usamos métodos de promise.

Promises na prática parte 2 (Resolve e then)

- Primeiro criamos uma promessa e depois cumprimos quando houver retorno dos dados.
- Promise é um recurso nativo da linguagem de programação JavaScript.
- Toda promise espera uma função de call-back que é uma ação, a lógica dentro dessa
função pode ser resolvida ou rejeitada.
- Quando há latência (demora) é assíncrono.
- O método then executa ações após a promise ser resolvida ou rejeitada.

Promises na prática parte 3 (Reject e then)

- Existe uma forma de rejeitar e dizer o que tem que ser feito se a promise for rejeitada.

Promises na prática parte 4 (Reject e catch)

- O método catch é muito mais utilizado que o método reject.
- O método catch deixa o código mais organizado e menos verboso para ler.
- É vantajoso usar promise quando ocorrer comunicação de forma assíncrona.

 Promises na prática parte 5 (Processamento assíncrono e encadeamento)

- Podemos encadear vários then um seguido do outro.
- Uma promise pode ser resolvida na sequencia do método em que foi chamada.

Promises na prática parte 5 (Processamento assíncrono e encadeamento)

- Podemos colocar uma promise dentro de outra promise ocorrendo um encadeamento.

Introdução, instalação e testes do pacote json-server

- Foi instalado o json server de forma global para podermos rodar de qualquer 
lugar do nosso sistema.
- Podemos instalar o json-server de forma global com o comando: npm install -g json-server
- Para rodar o servidor usamos o comando: json-server --watch banco-de-dados.json 
- http://localhost:3000/ofertas  -> URI
- Podemos trabalhar com requisições http no json-server como se fosse um banco de dados
real.

Estratégia de consumo de APIs Rest via Angular HTTP

- Temos de um lado nossa aplicação cliente e do outro nossa aplicação servidor.
- Para fazer com que um serviço seja injetado dentro de outro serviço nós precisamos 
utilizar a função decoradora @Injectable.
- Nós vamos pegar o serviço http do Angular 9 e vamos injetar dentro do nosso serviço
OfertasService, dessa forma nosso serviço será capaz de fazer requisições http para 
outras aplicações.
- O http do Angular retorna um Observable mas nesse momento estamos trabalhando com
Promise, nós vamos ajustar o retorno para que nossa aplicação não quebre.
- Vamos entender como usar Promise para consumir API REST.
- Observable é o retorno padrão do serviço http do Angular.
- Vamos converter os retornos de Observables para Promise para entendermos como funciona,
apenas para fins didaticos.
- O protocolo http é baseado em requisição e resposta.

Injetando o serviço HTTP do Angular como dependência de outros serviços

- Dentro do módulo principal que controla nossos componentes que é o app.module.ts, 
precisamos referenciar o HttpClientModule do angular e colocar sua referência no 
arrays de imports.
- O próximo passo é injetar o service do HttpClient dentro do nosso serviço, dentro da 
classe de serviços OfertasService injeta-se somente o HttpClient sem o nome Module.
- Dentro do OfertasService é necessário importar o Injectable, e referenciar @Injectable
no cabeçalho da classe.

Efetuando requisições HTTP para APIs Rest 

Filtrando ofertas

- Podemos aplicar filtros passando parametros direto na uri da requisição para o Json-Server.
- return this.http.get<Oferta[]>('http://localhost:3000/ofertas?destaque=true').toPromise();
- Acima especificamos que queremos somente as ofertas que possuem destaque.

Entendendo a estratégia de implementação do recursos de rotas (Routes)

- Vamos criar mais dois componentes RestauranteComponent e DiversaoComponent.
- Iremos criar um mapa de rotas dentro da nossa aplicação.
- No array de rotas especificamos o path e o componente associado ao path, veja abaixo.
    - { path: 'login', component: LoginComponent }

- O path é o caminho da uri por exemplo /restaurante ou /diversao 
- Conforme a uri é chamada então o componente é renderizado.
- Precisamos criar um mapa de rotas e incorporar dentro da classe AppModule.

Criando os componentes Restaurantes e Diversão

- ng g c Restaurante --skipTests=true
- ng g c Diversao --skipTests=true
- Os componentes são criados dentro da pasta raíz da aplicação.
  - /Users/julio/Desktop/appPassaroUrbano
- Os arquivos do componente são colocados de forma automática dentro da pasta src.
- Dentro da pasta src é criado uma pasta com o mesmo nome do componente em lowercase.

Criando o mapa de rotas

- Vamos criar um mapa de rotas e vamos associar esse mapa ao AppModule que é a classe 
principal da nossa aplicação.
- Dentro do diretório src, /Users/julio/Desktop/appPassaroUrbano/src
- Criamos uma pasta chamada routes, mkdir routes
- Dentro da pasta routes criamos o arquivo app.routes.ts, touch app.routes.ts
- Poderia ser criado um módulo em específico para as rotas.
- Iremos exportar um mapa de rotas.

- Após a criação do arquivo de rotas devemos referenciar no AppModule que é a classe principal.
- Devemos importar o módulo RouterModule em AppModule que é o módulo principal.
- Precisamos passar para o RouterModule o mapa de rotas que criamos.
- É necessário importar a constante de rotas que está dentro do arquivo app.routes.ts 
que criamos, veja abaixo.
    - import { ROUTES } from './../routes/app.routes';

- Por final passamos para o RouterModule a nossa constante que contém um array de rotas.
    - RouterModule.forRoot(ROUTES)

- O forRoot serve para referenciar as rotas globais da aplicação.
- O forChild serve para referenciar as rotas internas dentro do componente.
- Podem haver várias rotas internas dentro de um componente.
- Temos que dizer ao angular em qual região um componente baseado em determinado path
deve ser colocado, para fazer isso usamos a tag <router-outlet></router-outlet>.

Estabelecendo a navegação entre rotas

- Podemos navegar entre componentes através da diretiva routerLink, veja abaixo:
    - <a class="nav-link" routerLinkActive="active" [routerLink]="['/diversao']">Diversão</a>

- Podemos descobrir qual é a rota que está ativa e a partir disso tomar uma ação.

Alterando a classe do elemento associado a rota ativa

- Existe uma diretiva chamada routerLinkActive que serve para aplicar classe css ao elemento
html caso o elemento corresponda a rota ativa.
-   <a class="nav-link" routerLinkActive="active" [routerLink]="['/diversao']">Diversão</a>
- Acima active se refere a uma classe do bootstrap que dá estilo ao link que está sendo exibido.

Recuperando ofertas do tipo Restaurante (HTTP Resquest / API Rest / Promise)

- Nossas ofertas serão mostradas de forma dinâmica com base em requisições http que será 
feita para a api rest.

Recuperando ofertas do tipo Diversao (HTTP Resquest / API Rest / Promise)

Criando e navegando para a página Oferta

- Iremos criar um componente chamado oferta sendo que o objetivo desse componente será mostrar
a página onde poderemos ver os detalhes das ofertas, cada uma das ofertas permite acesso 
a uma página contendo seus detalhes.
- Criamos o componente com o comando: ng g c oferta --skipTests=true

Passando parâmetros na navegação

- Vamos aprender a passar parametros durante a navegação entre as rotas da aplicação.
- A passagem de parametros é um recurso muito importante pois os parametros servem para
configurar as tratativas de back-end.
- Por exemplo no nosso componente oferta nós precisamos receber um parametro que corresponda 
ao id da oferta clicada para que com base nesse parametro a gente possa configurar a 
consulta que vamos fazer na nossa API de back-end.
- Como configuro o path para que ele seja capaz de identificar e receber parametros?
- Parei em 1:06
